write.csv(all[,-12],"data/MAG_info.csv",row.names=FALSE)∑
write.csv(all[,-12],"data/MAG_info.csv",row.names=FALSE)
write.csv(all[,-12],"data/MAG_info.csv",row.names=FALSEMAGcounts <- read.csv("data/MAG_counts.csv", row.names=1, header=TRUE)
MAGlinfo <- read.delim("data/MAG_info.csv", row.names=1, header=TRUE))
MAGcounts <- read.csv("data/MAG_counts.csv", row.names=1, header=TRUE)
MAGlinfo <- read.delim("data/MAG_info.csv", row.names=1, header=TRUE)
head(MAGcounts)
head(MAGinfo)
MAGinfo <- read.delim("data/MAG_info.csv", row.names=1, header=TRUE)
head(MAGinfo)
MAGinfo <- read.csv("data/MAG_info.csv", row.names=1, header=TRUE)
head(MAGinfo)
identical(sort(colnames(MAGcounts)),sort(colnames(MAGinfo)))
identical(sort(rownames(MAGcounts)),sort(rownames(MAGinfo)))
#Sort all matrices
MAGcounts <- MAGcounts[sort(rownames(MAGcounts)),]
MAGinfo <- MAGinfo[sort(rownames(MAGlength)),]
#Visualise
MAGcounts[1:6,1:6]
MAGlength[1:6,1:6]
MAGcounts <- read.csv("data/MAG_counts.csv", row.names=1, header=TRUE)
MAGinfo <- read.csv("data/MAG_info.csv", row.names=1, header=TRUE)
#Check whether rows and columns are identical
identical(sort(rownames(MAGcounts)),sort(rownames(MAGinfo)))
#Sort all matrices
MAGcounts <- MAGcounts[sort(rownames(MAGcounts)),]
MAGinfo <- MAGinfo[sort(rownames(MAGinfo)),]
#Visualise
MAGcounts[1:6,1:6]
MAGlength[1:6,1:6]
MAGinfo[1:6,]
head(sweep((MAGcounts * 300), 2, MAGinfo$Length, FUN = '/'))
head(MAGcov)
MAGinfo$Length
head(MAGinfo)
MAGcounts[1:6,1:6]
∑∑head(sweep((MAGcounts * 300), 1, MAGinfo$Length, FUN = '/'))
head(sweep((MAGcounts * 300), 1, MAGinfo$Length, FUN = '/'))
MAGcov <- sweep((MAGcounts * 300), 1, MAGinfo$Length, FUN = '/')
MAGcov[MAGcov <= 0.3] <- 0
MAGcov[MAGcov > 0.3] <- 1
MAGcountsFilt <- MAGcounts * MAGcov
head(MAGcountsFilt)
MAGcountsFilt_relLength <- sweep(MAGcountsFilt, 1, MAGinfo$Length, FUN = '/')
dim(MAGcountsFilt_relLength)
MAGcountsFilt_relLength[1:6,1:6]
MAGra = sweep(sweep(MAGcountsFilt, 1, (MAGinfo$Length * 1000000), FUN = '/'),2,colSums(MAGcountsFilt),FUN = '/')
head(MAGra)
MAGcountsFilt[1,1]
MAGinfo$Length[1]
colSums(MAGcountsFilt)[1]
MAGra = sweep(sweep(MAGcountsFilt, 1, (MAGinfo$Length / 1000000), FUN = '/'),2,(colSums(MAGcountsFilt) / 1000000),FUN = '/')
MAGra[1,1]
MAGcountsFilt[1,2]
colSums(MAGcountsFilt)[2]
MAGra[1,2]
head(MAGra)
colSums(MAGra)
MAGinfo$Length / sum(MAGinfo$Length)
sum(MAGinfo$Length / sum(MAGinfo$Length))
tss <- function(x){sweep(x, 2, colSums(x), FUN="/")}}
tss <- function(x){sweep(x, 2, colSums(x), FUN="/")}
MAGra = tss(sweep(MAGcountsFilt, 1, (MAGinfo$Length / sum(MAGinfo$Length)), FUN = '/'))
head(MAGra)
colSums(MAGra)
# MAGra =  tss([Reads mapped to MAG] / ([MAG length]/[All MAGs length])
tss <- function(x){sweep(x, 2, colSums(x), FUN="/")}
MAGrel = tss(sweep(MAGcountsFilt, 1, (MAGinfo$Length / sum(MAGinfo$Length)), FUN = '/'))
MAGrel[1:6,1:6]
# Transpose the MAG table to have MAGs as columns and samples as rows
MAGrel_t=data.frame(t(MAGrel))
# Import phylo tree
phylo_tree=read.newick("data/gtdbtk.bac120.classify.tree")
phylo.tree=keep.tip(phylo_tree,colnames(MAGcounts_relL_rel_t))
is.ultrametric(phylo.tree)
phylo.tree=force.ultrametric(phylo.tree,method = "nnls")
is.ultrametric(phylo.tree)
write.tree("data/MAG.tree")
plot(phylo.tree)
write.tree(phylo.tree,"data/MAG.tree")
colnames(MAGrel)[which(!colnames(MAGrel)%in%cat_metadata$CombinedID)]
cat_metadata$CombinedID[which(!cat_metadata$CombinedID%in%colnames(MAGrel))]
# Detect samples in the count table not present in metadata
colnames(MAGrel)[which(!colnames(MAGrel)%in%cat_metadata$CombinedID)]
# Detect samples in metadata not present in the count table
cat_metadata$CombinedID[which(!cat_metadata$CombinedID%in%colnames(MAGrel))]
cat_metadata_red=cat_metadata[which(cat_metadata$CombinedID%in%colnames(MAGrel)),]
MAGrel_red=MAGrel[,which(colnames(MAGrel)%in%cat_metadata_red$CombinedID)]
dim(cat_metadata_red)[1]==dim(MAGrel_red)[2]
colnames(MAGrel_red)%in%cat_metadata_red$CombinedID
cat_metadata_red=cat_metadata_red[match(colnames(MAGrel_red),cat_metadata_red$CombinedID),]
colnames(MAGrel_red)==cat_metadata_red$CombinedID
# Jaccard type overlap metric, Neutral, q=0
MAG_dis_Neu_q0=pair_dis(as.matrix(MAGrel_red), qvalue=0)
saveRDS(MAG_dis_Neu_q0,file="results/MAG_dis_Neu_q0.rds")
MAG_dis_Neu_q0=readRDS(file = "results/MAG_dis_Neu_q0.rds")
MAG_dis_Neu_q0$L1_UqN[upper.tri(MAG_dis_Neu_q0$L1_UqN)]=t(MAG_dis_Neu_q0$L1_UqN)[upper.tri(MAG_dis_Neu_q0$L1_UqN)]
diag(MAG_dis_Neu_q0$L1_UqN)=1
set.seed(1)
MAG_dist_Neu_q0_Location_MHV<-betadisper(as.dist(MAG_dis_Neu_q0$L1_UqN),cat_metadata_red$Location)
permutest(MAG_dist_Neu_q0_Location_MHV)
MAG_dist_Neu_q0_Origin_MHV<-betadisper(as.dist(MAG_dis_Neu_q0$L1_UqN),cat_metadata_red$Origin)
permutest(MAG_dist_Neu_q0_Origin_MHV)
adonis(as.dist(MAG_dis_Neu_q0$L1_UqN)~Location*Origin,data = cat_metadata_red)
head(MAGrel_red)
MAG_dis_Neu_q0=pair_dis(as.matrix(MAGrel_red), qvalue=0)
class(MAGrel_red)
colSums(MAGrel)
is.na(colSums(MAGrel))
MAGrel = MAGrel[,!is.na(colSums(MAGrel))]
colSums(MAGrel)
# Detect samples in the count table not present in metadata
colnames(MAGrel)[which(!colnames(MAGrel)%in%cat_metadata$CombinedID)]
# Detect samples in metadata not present in the count table
cat_metadata$CombinedID[which(!cat_metadata$CombinedID%in%colnames(MAGrel))]
#Intersect MAG counts and metadata and validate
cat_metadata_red=cat_metadata[which(cat_metadata$CombinedID%in%colnames(MAGrel)),]
MAGrel_red=MAGrel[,which(colnames(MAGrel)%in%cat_metadata_red$CombinedID)]
dim(cat_metadata_red)[1]==dim(MAGrel_red)[2]
colnames(MAGrel_red)%in%cat_metadata_red$CombinedID
cat_metadata_red=cat_metadata_red[match(colnames(MAGrel_red),cat_metadata_red$CombinedID),]
colnames(MAGrel_red)==cat_metadata_red$CombinedID
MAG_dis_Neu_q0=pair_dis(as.matrix(MAGrel_red), qvalue=0)
saveRDS(MAG_dis_Neu_q0,file="results/MAG_dis_Neu_q0.rds")
MAG_dis_Neu_q0=readRDS(file = "results/MAG_dis_Neu_q0.rds")
MAG_dis_Neu_q0$L1_UqN[upper.tri(MAG_dis_Neu_q0$L1_UqN)]=t(MAG_dis_Neu_q0$L1_UqN)[upper.tri(MAG_dis_Neu_q0$L1_UqN)]
diag(MAG_dis_Neu_q0$L1_UqN)=1
set.seed(1)
MAG_dist_Neu_q0_Location_MHV<-betadisper(as.dist(MAG_dis_Neu_q0$L1_UqN),cat_metadata_red$Location)
permutest(MAG_dist_Neu_q0_Location_MHV)
MAG_dist_Neu_q0_Origin_MHV<-betadisper(as.dist(MAG_dis_Neu_q0$L1_UqN),cat_metadata_red$Origin)
permutest(MAG_dist_Neu_q0_Origin_MHV)
adonis(as.dist(MAG_dis_Neu_q0$L1_UqN)~Location*Origin,data = cat_metadata_red)
# Jaccard tpe overlap metric, Neutral, q=1
MAG_dis_Neu_q1=pair_dis(MAGrel_red,qvalue = 1)
saveRDS(MAG_dis_Neu_q1,file="results/MAG_dis_Neu_q1.rds")
MAG_dis_Neu_q1=readRDS(file="results/MAG_dis_Neu_q1.rds")
MAG_dis_Neu_q1$L1_UqN[upper.tri(MAG_dis_Neu_q1$L1_UqN)]=t(MAG_dis_Neu_q1$L1_UqN)[upper.tri(MAG_dis_Neu_q1$L1_UqN)]
diag(MAG_dis_Neu_q1$L1_UqN)=1
set.seed(1)
MAG_dist_Neu_q1_Location_MHV<-betadisper(as.dist(MAG_dis_Neu_q1$L1_UqN),cat_metadata_red$Location)
anova(MAG_dist_Neu_q1_Location_MHV)
MAG_dist_Neu_q1_Origin_MHV<-betadisper(as.dist(MAG_dis_Neu_q1$L1_UqN),cat_metadata_red$Origin)
anova(MAG_dist_Neu_q1_Origin_MHV)
adonis(as.dist(MAG_dis_Neu_q1$L1_UqN)~Location*Origin,data = cat_metadata_red)
set.seed(1)
MAG_nmds=metaMDS(MAG_dis_Neu_q1$L1_UqN,k=2)
MAG_nmds$stress # stress = 0.15
MAG_nmds_scores=data.frame(MAG_nmds$points,group=factor(cat_metadata_red$Location))
MAG_nmds_mean=aggregate(MAG_nmds_scores[,1:2],list(MAG_nmds_scores$group),mean)
## Function to make ellipses in plot
veganCovEllipse<-function (cov, center = c(0, 0), scale = 1, npoints = 100)
{
theta <- (0:npoints) * 2 * pi/npoints
Circle <- cbind(cos(theta), sin(theta))
t(center + scale * t(Circle %*% chol(cov)))
}
df_ell <- data.frame()
for(g in levels(MAG_nmds_scores$group)){
df_ell <- rbind(df_ell, cbind(as.data.frame(with(MAG_nmds_scores[MAG_nmds_scores$group==g,],
veganCovEllipse(cov.wt(cbind(MDS1,MDS2),wt=rep(1/length(MDS1),length(MDS1)))$cov,center=c(mean(MDS1),mean(MDS2)))))
,group=g))
}
myColors=c('#c4d7d1','#408892','#2d3749','#c04062','#6b3a59','#e08683')
names(myColors)=levels(cat_metadata_red$Location)
colScale=scale_colour_manual(name = "Location",values = myColors)
shapeScale=scale_shape_manual(name="Origin",values = c(1,16))
windows(h=8,w=10)
ggplot(MAG_nmds_scores,
aes(x=MDS1,y=MDS2))+
geom_point(aes(shape=as.factor(cat_metadata_red$Origin),
color=as.factor(cat_metadata_red$Location)),size=3) +
geom_path(data=df_ell, aes(x=MDS1, y=MDS2,color=group), size=0.5, linetype=2) +
colScale +
shapeScale +
theme_bw()
MAGcounts_pa=1*(MAGcounts_relL_rel_red>0)
MAGcounts_pa[1:6,1:6]
table_upset_analysis_cont=t(aggregate(t(MAGcounts_pa),by=list(cat_metadata_red$Location),FUN=sum)[,-1])
colnames(table_upset_analysis_cont)=levels(as.factor(cat_metadata_red$Location))
table_upset_analysis=(table_upset_analysis_cont>0)*1
table_upset_analysis=data.frame(table_upset_analysis)
table_upset_analysis=apply(table_upset_analysis,2,as.integer)
rownames(table_upset_analysis) <- rownames(MAGcounts_pa)
upset(as.data.frame(table_upset_analysis), sets = c("Aruba","Brazil","CaboVerde","Denmark","Malaysia","Spain"), mb.ratio = c(0.55, 0.45), order.by = "freq")
MAGcounts_edger=MAGcounts
MAGcounts_edger=MAGcounts_edger[,which(colnames(MAGcounts_edger)%in%cat_metadata_red$CombinedID)]
dim(cat_metadata_red)[1]==dim(MAGcounts_edger)[2]
colnames(MAGcounts_edger)==cat_metadata_red$CombinedID
design=model.matrix(~Location+Origin,data = cat_metadata_red)
dge=DGEList(counts=MAGcounts_edger)
dge=estimateDisp(dge, design,robust = TRUE)
fit=glmQLFit(dge, design)
qlf=glmQLFTest(fit)
results=topTags(qlf, n=20)
summary(decideTests(qlf))
difMAGs <- results[results$table$FDR<0.05,]
difMAGs <- cbind(as.data.frame(results[results$table$FDR<0.05,]),table_upset_analysis_cont[rownames(difMAGs),], taxonomy[rownames(difMAGs),], quality[rownames(difMAGs),])
write.csv(difMAGs,"results/enrichment.csv")
install.packages("ggtree")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("ggtree")
library(ggtree)
library(ape)
setwd("/Users/anttonalberdi/github/domesticat/")
tree <- read.tree("data/MAG.tree")
tree
info <- read.csv("data/MAG_info.csv")
info
info <- read.csv("data/MAG_info.csv",row.names=1)
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("ggtreeExtra")
library(ggtree)
library(ggtreeExtra)
library(phyloseq)
library(dplyr)
library(ape)
data("GlobalPatterns")
GP <- GlobalPatterns
GP <- prune_taxa(taxa_sums(GP) > 600, GP)
sample_data(GP)$human <- get_variable(GP, "SampleType") %in%
c("Feces", "Skin")
mergedGP <- merge_samples(GP, "SampleType")
mergedGP <- rarefy_even_depth(mergedGP,rngseed=394582)
mergedGP <- tax_glom(mergedGP,"Order")
ggtree(tree, layout="fan")
info <- read.csv("data/MAG_info.csv")
head(info)
ggtree(tree, layout="fan") +
geom_cladelab(data=info, mapping=aes(node=MAG, offset.text=pos),
hjust=0.5,
angle="auto",
barsize=NA,
horizontal=FALSE,
fontsize=1.4,
fontface="italic")
ggtree(tree, layout="fan") +
geom_cladelab(data=info, mapping=aes(node=MAG, label=MAG, offset.text=pos),
hjust=0.5,
angle="auto",
barsize=NA,
horizontal=FALSE,
fontsize=1.4,
fontface="italic")
head(info)
ggtree(tree, layout="circular") %<+% info +
geom_tippoint(aes(color=Phylum))
ggtree(tree, layout="circular") %<+% info +
geom_tippoint(aes(color=Phylum)) +
geom_tiplab2(aes(label=MAG), align=T, linetype=NA,
size=2, offset=4, hjust=0.5)
head(info)
ggtree(tree, layout="circular") %<+% info +
geom_tippoint(aes(color=Phylum))
ggtree(tree, layout="circular", width=1) %<+% info +
geom_tippoint(aes(color=Phylum))
ggtree(tree, layout="circular", width=0.5) %<+% info +
geom_tippoint(aes(color=Phylum))
ggtree(tree, layout="circular", width=0.5) %<+% info +
geom_tippoint(aes(color=Phylum)) +
geom_tiplab(size=3)
colors <- c("#5b828e","#bbcfd7","#d2c8bc","#ba9a88","#ac7e62","#dcdfe4","#aca69f","#adab76","#666b3a","#0f211a")
ggtree(tree, layout="circular", width=0.5) %<+% info +
geom_tippoint(aes(color=Phylum)) +
scale_color_manual(colors) +
geom_tiplab(size=3)
colors
ggtree(tree, layout="circular", width=0.5) %<+% info +
geom_tippoint(aes(color=Phylum)) +
scale_color_manual(values=colors) +
geom_tiplab(size=3)
colors <- c("#5b828e","#d2c8bc","#bbcfd7","#ba9a88","#ac7e62","#dcdfe4","#aca69f","#adab76","#666b3a","#0f211a")
ggtree(tree, layout="circular", width=0.5) %<+% info +
geom_tippoint(aes(color=Phylum)) +
scale_color_manual(values=colors) +
geom_tiplab(size=3)
ggtree(tree, layout="circular", width=0.5) %<+% info +
geom_tippoint(aes(color=Phylum)) +
scale_color_manual(values=colors) +
geom_tiplab(size=3)
colors <- c("#5b828e","#5e6668","#bbcfd7","#ba9a88","#ac7e62","#dcdfe4","#aca69f","#adab76","#666b3a","#0f211a")
ggtree(tree, layout="circular", width=0.5) %<+% info +
geom_tippoint(aes(color=Phylum)) +
scale_color_manual(values=colors) +
geom_tiplab(size=3)
colors <- c("#5b828e","#5e6668","#bbcfd7","#ba9a88","#ac7e62","#aca69f","#adab76","#666b3a","#0f211a","#dcdfe4")
ggtree(tree, layout="circular", width=0.5) %<+% info +
geom_tippoint(aes(color=Phylum)) +
scale_color_manual(values=colors) +
geom_tiplab(size=3)
colors <- c("#5b828e","#5e6668","#bbcfd7","#ba9a88","#ac7e62","#aca69f","#adab76","#666b3a","#0f211a","#2b6684")
ggtree(tree, layout="circular", width=0.5) %<+% info +
geom_tippoint(aes(color=Phylum)) +
scale_color_manual(values=colors) +
geom_tiplab(size=3)
colors <- c("#5b828e","#5e6668","#bbcfd7","#ba9a88","#ac7e62","#aca69f","#adab76","#666b3a","#0f211a","#60879b")
ggtree(tree, layout="circular", width=0.5) %<+% info +
geom_tippoint(aes(color=Phylum)) +
scale_color_manual(values=colors) +
geom_tiplab(size=3)
colors <- c("#5b828e","#5e6668","#bbcfd7","#ba9a88","#ac7e62","#aca69f","#adab76","#666b3a","#0f211a","#012e67")
ggtree(tree, layout="circular", width=0.5) %<+% info +
geom_tippoint(aes(color=Phylum)) +
scale_color_manual(values=colors) +
geom_tiplab(size=3)
ggtree(tree, layout="circular", width=0.5) %<+% info +
geom_tippoint(aes(color=Phylum)) +
scale_color_manual(values=colors) +
geom_tiplab(aes(color=Phylum),size=3)
ggtree(tree, layout="circular", width=0.5) %<+% info +
geom_tippoint(aes(color=Phylum)) +
scale_color_manual(values=colors) +
geom_tiplab(aes(color=Phylum),size=3, hjust = -.1)
ggtree(tree, layout="circular", width=0.5) %<+% info +
geom_tippoint(aes(color=Phylum)) +
scale_color_brewer(palette="Spectral") +
geom_tiplab(aes(color=Phylum),size=3, hjust = -.1)
base <- ggtree(tree, layout="circular", width=0.5) %<+% info +
geom_tippoint(aes(color=Phylum)) +
scale_color_manual(values=colors) #+
#geom_tiplab(aes(color=Phylum),size=3, hjust = -.1)
base
head(info)
gheatmap(base, info[,c("MAG","Completeness")], offset = 10, color=NULL,
colnames_position="top",
colnames_angle=90, colnames_offset_y = 1,
hjust=0, font.size=2)
gheatmap(base, info[,c("MAG","Completeness")], offset = 10,
colnames_position="top",
colnames_angle=90, colnames_offset_y = 1,
hjust=0, font.size=2)
rownames(info) <- info[,1]
gheatmap(base, info[,c("MAG","Completeness")], offset = 10,
colnames_position="top",
colnames_angle=90, colnames_offset_y = 1,
hjust=0, font.size=2)
gheatmap(base, info[,c("MAG","Completeness")], offset = 10,
colnames_position="top",
colnames_angle=90, colnames_offset_y = 1,
hjust=0, font.size=2) +
theme(legend.position="none")
gheatmap(base, info[,"Completeness"], offset = 10,
colnames_position="top",
colnames_angle=90, colnames_offset_y = 1,
hjust=0, font.size=2) +
theme(legend.position="none")
info[,"Completeness"]
info$Completeness
gheatmap(base, info[,c("Completeness","Contamination")], offset = 10,
colnames_position="top",
colnames_angle=90, colnames_offset_y = 1,
hjust=0, font.size=2) +
theme(legend.position="none")
gheatmap(base, info[,c("Completeness","Contamination")], offset = 10,
colnames_position="top",
colnames_angle=90, colnames_offset_y = 1,
hjust=0, font.size=2) +
scale_colour_gradient(low='blue', high='red') +
theme(legend.position="none")
info[,2]
info[,3]
class(info[,3])
gheatmap(base, info[,c("Completeness","Contamination")], offset = 10,
colnames_position="top",
colnames_angle=90, colnames_offset_y = 1,
hjust=0, font.size=2) +
scale_fill_brewer(palette="Set2") +
theme(legend.position="none")
cols=sample(rainbow(10), 40, replace=T)
gheatmap(base, info[,c("Completeness","Contamination")], offset = 10,
colnames_position="top",
colnames_angle=90, colnames_offset_y = 1,
hjust=0, font.size=2) +
scale_fill_manual(values=cols) +
theme(legend.position="none")
gheatmap(base, info[,c("Completeness","Contamination")], offset = 1,
colnames_position="top",
colnames_angle=90, colnames_offset_y = 1,
hjust=0, font.size=2) +
scale_fill_manual(values=cols) +
theme(legend.position="none")
gheatmap(base, info[,c("Completeness","Contamination")], offset = 1,
colnames_position="top",
colnames_angle=90, colnames_offset_y = 1,
hjust=0, font.size=2) +
theme(legend.position="none")
gheatmap(base, info[,c("Completeness","Contamination")], offset = 0.1,
colnames_position="top",
colnames_angle=90, colnames_offset_y = 1,
hjust=0, font.size=2) +
theme(legend.position="none")
gheatmap(base, info[,c("Completeness","Contamination")], offset = 0.01,
colnames_position="top",
colnames_angle=90, colnames_offset_y = 1,
hjust=0, font.size=2) +
theme(legend.position="none")
gheatmap(base, info[,c("Completeness","Contamination")], offset = 0,
colnames_position="top",
colnames_angle=90, colnames_offset_y = 1,
hjust=0, font.size=2) +
theme(legend.position="none")
mycol <- c("navy", "blue", "cyan", "lightcyan", "yellow", "red", "red4")
gheatmap(base, info[,c("Completeness","Contamination")], offset = 0,
colnames_position="top",
colnames_angle=90, colnames_offset_y = 1,
hjust=0, font.size=2) +
scale_fill_gradientn(colours = mycol)
theme(legend.position="none")
gheatmap(base, info[,c("Completeness","Contamination")], offset = 0,
colnames_position="top",
colnames_angle=90, colnames_offset_y = 1,
hjust=0, font.size=2) +
scale_fill_viridis_c(option="A", name="continuous\nvalue") +
theme(legend.position="none")
gheatmap(base, info[,c("Completeness","Contamination")], offset = 0,
colnames_position="top",
colnames_angle=90, colnames_offset_y = 1,
hjust=0, font.size=2) +
scale_fill_gradientn(colours = mycol) +
theme(legend.position="none")
gheatmap(base, info[,c("Completeness","Contamination")], offset = 0, width=.3,
colnames_position="top",
colnames_angle=90, colnames_offset_y = 1,
hjust=0, font.size=2) +
scale_fill_gradientn(colours = mycol) +
theme(legend.position="none")
gheatmap(base, info[,c("Completeness","Contamination")], offset = 0, width=.1,
colnames_position="top",
colnames_angle=90, colnames_offset_y = 1,
hjust=0, font.size=2) +
scale_fill_gradientn(colours = mycol) +
theme(legend.position="none")
mycol <- c("cyan", "lightcyan", "yellow", "red", "red4")
gheatmap(base, info[,c("Completeness","Contamination")], offset = 0, width=.1,
colnames_position="top",
colnames_angle=90, colnames_offset_y = 1,
hjust=0, font.size=2) +
scale_fill_gradientn(colours = mycol) +
theme(legend.position="none")
mycol <- c("blue", "cyan", "lightcyan", "yellow", "red", "red4")
gheatmap(base, info[,c("Completeness","Contamination")], offset = 0, width=.1,
colnames_position="top",
colnames_angle=90, colnames_offset_y = 1,
hjust=0, font.size=2) +
scale_fill_gradientn(colours = mycol) +
theme(legend.position="none")
mycol <- c("#193439","#79ad9f","#c49b60","#9a532b","#503143")
gheatmap(base, info[,c("Completeness","Contamination")], offset = 0, width=.1,
colnames_position="top",
colnames_angle=90, colnames_offset_y = 1,
hjust=0, font.size=2) +
scale_fill_gradientn(colours = mycol) +
theme(legend.position="none")
mycol <- c("#19343940","#79ad9f40","#c49b6040","#9a532b40","#50314340")
gheatmap(base, info[,c("Completeness","Contamination")], offset = 0, width=.1,
colnames_position="top",
colnames_angle=90, colnames_offset_y = 1,
hjust=0, font.size=2) +
scale_fill_gradientn(colours = mycol) +
theme(legend.position="none")
çmycol <- c("#193439","#79ad9f","#c49b60","#9a532b","#503143")
gheatmap(base, info[,c("Completeness","Contamination")], offset = 0, width=.1,
colnames_position="top",
colnames_angle=90, colnames_offset_y = 1,
hjust=0, font.size=2) +
scale_fill_gradientn(colours = mycol) +
theme(legend.position="none")
mycol <- c("#193439","#79ad9f","#c49b60","#9a532b","#503143")
gheatmap(base, info[,c("Completeness","Contamination")], offset = 0, width=.1,
colnames_position="top",
colnames_angle=90, colnames_offset_y = 1,
hjust=0, font.size=2) +
scale_fill_gradientn(colours = mycol) +
theme(legend.position="none")
mycol <- c("#79ad9f","#193439","#c49b60","#9a532b","#503143")
gheatmap(base, info[,c("Completeness","Contamination")], offset = 0, width=.1,
colnames_position="top",
colnames_angle=90, colnames_offset_y = 1,
hjust=0, font.size=2) +
scale_fill_gradientn(colours = mycol) +
theme(legend.posit
mycol <- c("#79ad9f","#193439","#c49b60","#9a532b","#503143")
gheatmap(base, info[,c("Completeness","Contamination")], offset = 0, width=.1,
colnames_position="top",
colnames_angle=90, colnames_offset_y = 1,
hjust=0, font.size=2) +
scale_fill_gradientn(colours = mycol) +
theme(legend.posit
mycol <- c("#79ad9f","#193439","#c49b60","#9a532b","#503143")
gheatmap(base, info[,c("Completeness","Contamination")], offset = 0, width=.1,
colnames_position="top",
colnames_angle=90, colnames_offset_y = 1,
hjust=0, font.size=2) +
scale_fill_gradientn(colours = mycol) +
theme(legend.posit
mycol <- c("#79ad9f","#193439","#c49b60","#9a532b","#503143")
gheatmap(base, info[,c("Completeness","Contamination")], offset = 0, width=.1,
colnames_position="top",
colnames_angle=90, colnames_offset_y = 1,
hjust=0, font.size=2) +
scale_fill_gradientn(colours = mycol) +
theme(legend.position="none")
mycol <- c("#79ad9f","#193439","#d3b78f","#b37d5f","#503143")
gheatmap(base, info[,c("Completeness","Contamination")], offset = 0, width=.1,
colnames_position="top",
colnames_angle=90, colnames_offset_y = 1,
hjust=0, font.size=2) +
scale_fill_gradientn(colours = mycol) +
theme(legend.position="none")
head(info)
