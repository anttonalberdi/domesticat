library("pdftools")
library("pdfsearch")
setwd("/Users/anttonalberdi/github/microbiota_adaptation_review/")
#Keyword list
keywords = c('wild', 'fitness', 'adaptation')
#Study
doi="10.3389_fimmu.2020.585431"
#Screen PDF
pdffile <- pdftools::pdf_text(paste0("papers/",doi,".pdf"),split_pdf=TRUE)
key_res <- keyword_search(pdffile, keyword = keywords)
paste0("papers/",doi,".pdf")
pdffile <- pdftools::pdf_text(paste0("papers/",doi,".pdf"),split_pdf=TRUE)
pdffile <- pdftools::pdf_text(paste0("papers/",doi,".pdf"))
key_res <- keyword_search(pdffile, keyword = keywords)
pdffile
table(key_res[1])
keyword_table <- cbind(key_res$keyword,unlist(key_res$line_text))
keyword_table
setwd("/Users/anttonalberdi/github/domesticat")
taxonomy <- read.delim("data/gtdbtk.bac120.summary.tsv", sep = '\t')
taxonomyclean <- taxonomy %>%
mutate(classification = str_replace_all(classification, ".__", "")) %>%
# Split the classification string into columns for each taxonnomic rank
separate(col = classification, sep = ";", into = c("Domain", "Phylum", "Class", "Order", "Family", "Genus", "Species"))
# Remove first column
taxonomyclean1 <- taxonomyclean[,-1]
# Set MAG name as row names of the dataframe
rownames(taxonomyclean1) <- taxonomyclean[,1]
# Get the necessary columns, convert to matrix
taxmatrix <- as.matrix(taxonomyclean1[1:7])
# Pool Firmicutes A,B C into Firmicutes
taxmatrix_mod=data.frame(taxmatrix)
# taxmatrix_mod$Phylum[grepl("Firmi",taxmatrix_mod$Phylum)]="Firmicutes"
# Load phylogenetic tree
tree=read.tree("data/gtdbtk.bac120.classify_mod.tree")
# Load DRAM data
DRAM_data=read.delim("data/DRAM_product.tsv",sep='\t')
dim(DRAM_data)
# Discard the "fasta" genome
DRAM_data=DRAM_data[DRAM_data$genome!="fasta",]
rownames(DRAM_data)=DRAM_data$genome
DRAM=DRAM_data[,-1]
# Convert True/False character to 1/0 binary, numeric data
for(i in 1:ncol(DRAM)){
if(is.character(DRAM[,i])){
DRAM[,i][DRAM[,i]=="True"]=1
DRAM[,i][DRAM[,i]=="False"]=0
DRAM[,i]=as.numeric(DRAM[,i])
}
}
str(DRAM)
# List of completely absent functions
colnames(DRAM[,colSums(DRAM)==0])
# [1] "X3.Hydroxypropionate.bi.cycle"
# [2] "Complex.I..NAD.P.H.quinone.oxidoreductase..chloroplasts.and.cyanobacteria"
# [3] "Complex.I..NADH.dehydrogenase..ubiquinone..1.alpha.subcomplex"
# [4] "Complex.II..Succinate.dehydrogenase..ubiquinone."
# [5] "Complex.IV.Low.affinity..Cytochrome.aa3.600.menaquinol.oxidase"
# [6] "Complex.V..F.type.ATPase..eukaryotes"
# [7] "Complex.V..V.type.ATPase..eukaryotes"
# [8] "Methanogenesis.and.methanotrophy..Key.functional.gene"
# [9] "Methanogenesis.and.methanotrophy..dimethylamine....monomethylamine"
# [10] "Methanogenesis.and.methanotrophy..methane....methanol..with.oxygen..mmo."
# [11] "Methanogenesis.and.methanotrophy..methane....methanol..with.oxygen..pmo."
# [12] "Methanogenesis.and.methanotrophy..methanol....methane"
# [13] "Methanogenesis.and.methanotrophy..monomethylamine....ammonia"
# [14] "Methanogenesis.and.methanotrophy..putative.but.not.defining.CO2....methane"
# [15] "Methanogenesis.and.methanotrophy..trimethylamine....dimethylamine"
# [16] "Nitrogen.metabolism..Bacterial..aerobic.specific..ammonia.oxidation"
# [17] "Nitrogen.metabolism..Bacterial..anaerobic.specific..ammonia.oxidation"
# [18] "Nitrogen.metabolism..Bacterial.Archaeal.ammonia.oxidation"
# [19] "Nitrogen.metabolism..Nitrogen.fixation.altennative"
# [20] "Nitrogen.metabolism..ammonia....nitrite"
# [21] "Nitrogen.metabolism..nitric.oxide....nitrous.oxide"
# [22] "Nitrogen.metabolism..nitrous.oxide....nitrogen"
# [23] "Other.Reductases..TMAO.reductase"
# [24] "Other.Reductases..arsenate.reduction..pt.2"
# [25] "Other.Reductases..selenate.Chlorate.reduction"
# [26] "Photosynthesis..Photosystem.I"
# [27] "Photosynthesis..Photosystem.II"
# [28] "SCFA.and.alcohol.conversions..Propionate..pt.1"
# [29] "SCFA.and.alcohol.conversions..acetate..pt.3"
# [30] "Sulfur.metabolism..Thiosulfate.oxidation.by.SOX.complex..thiosulfate....sulfate"
# Discard completely absent functions from further exploration
dram=DRAM[,colSums(DRAM)>0]
# MAGs in taxonomy table and dram table in sam order.
mean(rownames(dram)==rownames(taxmatrix_mod))
# group DRAM functions
module=names(dram)[1:12]
etc=names(dram)[13:25]
cazy=names(dram)[26:44]
metab=names(dram)[c(45:54,66:67)]
scfa=names(dram)[55:65]
### Exploration of module variables ###
#
